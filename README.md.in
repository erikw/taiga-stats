# Taiga Statistics Tool

This is a script for all you "Kanban masters" who use Taiga and are interested in visualizing progress and generate some automated statistics and graphs.

[Taiga](https://taiga.io/) is an Open Source virtual Scrum and Kanban board that is popular for managing projects and work. We use a physical whiteboard at work but I mirror the status of stories in Taiga so that I can collect some statistics and generate diagrams and graphs using this tool I wrote.

# Features

```console
$ taiga-stats --help
<insert-helptext-here>
```

## Cumulative Flow Diagram

From a [CFD](http://brodzinski.com/2013/07/cumulative-flow-diagram.html) a lot of interesting insights about your team's progress [can be found](http://paulklipp.com/images/Interpreting_a_Cumulative_Flow_Diagram.jpg). However I'm not found of repetitive work like counting and entering numbers in an Excel sheet. This had to be automated! Therefore I deiced to write this script to save data on a daily basis with a cron job and a function for generating this diagram. This diagram can the be put on a TV visible in the hallways.


This is an example diagram generated from [mock data](sample_data/cfd_example.dat):

![Example CFD](img/cfd_example.png)

Textual annotations can be put in the plot by manually editing the `.dat file`.


Also a target date for the project deadline can be specified. Then a line will be drawn showing the ideal work pace towards this date, as seen below where the target finish date is in week 46.

![Example CFD with ideal pace](img/cfd_example_ideal_pace.png)


To save the data and generate the diagram each working day I have this cronjob:

```console
$ crontab -l | grep taiga
0 18 * * 1-5            $HOME/bin/taiga-stats_cron.sh
```

and the script `taiga-stats_cron.sh`:

```bash
#!/usr/bin/env sh

cd $HOME/dev/taiga-stats

poetry run taiga_stats store_daily --tag some_feature_tag
poetry run taiga_stats cfd --tag some_feature_tag
```

## User Story Dependency Graph

Some stories requires other to be completed before they can be started. I thought it would be handy if you could keep track of these dependencies in Taiga but simply writing for each US a list of other stories that this story depends on. Then from this information a [.dot file](sample_data/dependencies_example.dot) can be generated that should how you user stories depends on each other. This graph is very useful for work planning i.e. what to start with and how much parallelization is possible and at what stages.

![US Dependency Graph](img/dependencies_example.png)

The stories that are marked as Done in Taiga have a green color in the graph.


### How to set up the dependency feature

First create a new custom filed in taiga named `Depends On` under Settings > Attributes > Custom Fields:

![Custom Field](img/taiga_custom_field.png)


Then go to your User Stories and enter some dependencies as demonstrated below.

![US dependency](img/us_depends_on.png)


Then run the script and generate a png file.


```console
$ taiga-stats deps_dot
$ dot -T png -o ./dependencies.png ./dependencies.dot
```


# Setup

## Installation
### From package
TODO 

### From Git
* Clone this git
	```console
	$ git clone https://github.com/erikw/taiga-stats.git
	$ cd taiga-stats
	```
* Install Poetry
* Numpy install issues as of 2021-10-31
  * `$ poetry install` did not work with numpy on macOS. Solution from https://github.com/python-poetry/poetry/issues/3196#issuecomment-769753478
	```console
	$ pyenv local 3.9.7
	$ poetry env use 3.9.7
	$ poetry env use 3.9.7
	$ poetry config experimental.new-installer false
	$ poetry install
	```

* Install dependencies
	```console
	$ poetry install
	```
* Now taiga-stats should work!
	```console
	$ poetry run taiga_stats -h
	```

## Config file
It is tedious to have to specify the server URL and the authentication token everytime. Also you typically work with some project at a time and would like to have default values for the project to use and maybe which tag to filter on. You can genearte a configuration file to set these default values.

```console
$ taiga-stats config_template
$ mv ./taiga.conf.template ~/.taiga-stats.conf
$ vi ~/.taiga-stats.conf
```
